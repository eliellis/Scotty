{
  "name": "mr.rager",
  "version": "0.0.2",
  "description": "A simple and extremely chill parser for the Content-Range header, written in Javascript",
  "main": "mr.rager.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rubberduckie/Mr.Rager.git"
  },
  "keywords": [
    "range",
    "content",
    "rager",
    "mister",
    "mr",
    "parse",
    "bytes",
    "byte",
    "ranges"
  ],
  "author": {
    "name": "rubberduckie"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "4cf89d4b4ebd37b2fe7d4f7bed7fbd0ccc40cc92",
  "readme": "# Mr.Rager\nMr.Rager is a <a href=\"http://www.youtube.com/watch?v=rCLBGY0huVE\" target=\"_blank\">very relaxed</a> parser written in Javascript for getting range representations from Content-Range headers. Mr.Rager won't yell about much, and if he does something went seriously wrong. If the parser experiences anything out of the ordinary it will gently degrade in behaviour of parsing, and in the instance of some really cooky headers, it will just give back a range representative of the whole file.\n\n## Usage\n<strong>parse(rangeHeader, size)</strong>\n<br>\n<em>returns an array where each element is an 2-element object of parsed values, the 'begining' key being the start of the range, and the 'end' key being the end of the range</em>\n\n#### Example\n```javascript\nvar http = require('http');\n\nvar server = http.createServer(function(req, res){\n    res.writeHead(200, {'content-type' : 'application/json'});\n    var parsed = parse(req.headers['range'], 1000);\n    console.log('Parsed \"range\" header as:', parsed);\n    res.end();\n    setTimeout(function(){\n        process.exit(0);\n    }, 3000);\n}).listen(8000, function(){\n    console.log('Listening on port 8000');\n});\n\nhttp.request({\n    host: 'localhost',\n    method: 'GET',\n    port: 8000,\n    headers: {'range': 'bytes=500-'}}).end();\n```",
  "_id": "mr.rager@0.0.2",
  "_from": "mr.rager@*"
}
